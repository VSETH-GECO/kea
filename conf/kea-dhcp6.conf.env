// This is a basic configuration for the Kea DHCPv6 server. Subnet declarations
// are mostly commented out and no interfaces are listed. Therefore, the servers
// will not listen or respond to any queries.
// The basic configuration must be extended to specify interfaces on which
// the servers should listen. There are a number of example options defined.
// These probably don't make any sense in your network. Make sure you at least
// update the following, before running this example in your network:
// - change the network interface names
// - change the subnets to match your actual network
// - change the option values to match your network
//
// This is just a very basic configuration. Kea comes with large suite (over 30)
// of configuration examples and extensive Kea User's Guide. Please refer to
// those materials to get better understanding of what this software is able to
// do. Comments in this configuration file sometimes refer to sections for more
// details. These are section numbers in Kea User's Guide. The version matching
// your software should come with your Kea package, but it is also available
// in ISC's Knowledgebase (https://kea.readthedocs.io; the direct link for
// the stable version is https://kea.readthedocs.io/).
//
// This configuration file contains only DHCPv6 server's configuration.
// If configurations for other Kea services are also included in this file they
// are ignored by the DHCPv6 server.
{

// DHCPv6 configuration starts here. This section will be read by DHCPv6 server
// and will be ignored by other components.
"Dhcp6": {
    // Add names of your network interfaces to listen on.
    "interfaces-config": {
        // You typically want to put specific interface names here, e.g. eth0
        // but you can also specify unicast addresses (e.g. eth0/2001:db8::1) if
        // you want your server to handle unicast traffic in addition to
        // multicast. (DHCPv6 is a multicast based protocol).
        "interfaces": [
            "bond0/*",
            "*"
        ]
    },

    // Kea supports control channel, which is a way to receive management
    // commands while the server is running. This is a Unix domain socket that
    // receives commands formatted in JSON, e.g. config-set (which sets new
    // configuration), config-reload (which tells Kea to reload its
    // configuration from file), statistic-get (to retrieve statistics) and many
    // more. For detailed description, see Sections 8.8, 16 and 15.
    "control-socket": {
        "socket-type": "unix",
        "socket-name": "/run/kea-dhcp6-ctrl-socket"
    },

    // Use Memfile lease database backend to store leases in a CSV file.
    // Depending on how Kea was compiled, it may also support SQL databases
    // (MySQL and/or PostgreSQL) and even Cassandra. Those database backends
    // require more parameters, like name, host and possibly user and password.
    // There are dedicated examples for each backend. See Section 7.2.2 "Lease
    // Storage" for details.
    "lease-database": {
        "type": "mysql",
        "name": "$KEA_DB_DB",
        "user": "$KEA_DB_USER",
        "password": "$KEA_DB_PASSWORD",
        "host": "$KEA_DB_HOST",
        "port": $KEA_DB_PORT
    },

    // Kea allows storing host reservations in a database. If your network is
    // small or you have few reservations, it's probably easier to keep them
    // in the configuration file. If your network is large, it's usually better
    // to use database for it. To enable it, uncomment the following:
    "hosts-database": {
        "type": "mysql",
        "name": "$KEA_DB_DB",
        "user": "$KEA_DB_USER",
        "password": "$KEA_DB_PASSWORD",
        "host": "$KEA_DB_HOST",
        "port": $KEA_DB_PORT
    },
    // See Section 7.2.3 "Hosts storage" for details.

    // Setup reclamation of the expired leases and leases affinity.
    // Expired leases will be reclaimed every 10 seconds. Every 25
    // seconds reclaimed leases, which have expired more than 3600
    // seconds ago, will be removed. The limits for leases reclamation
    // are 100 leases or 250 ms for a single cycle. A warning message
    // will be logged if there are still expired leases in the
    // database after 5 consecutive reclamation cycles.
    "expired-leases-processing": {
        "reclaim-timer-wait-time": 10,
        "flush-reclaimed-timer-wait-time": 25,
        "hold-reclaimed-time": 3600,
        "max-reclaim-leases": 100,
        "max-reclaim-time": 250,
        "unwarned-reclaim-cycles": 5
    },

    // These parameters govern global timers. Addresses will be assigned with
    // preferred and valid lifetimes being 3000 and 4000, respectively. Client
    // is told to start renewing after 1000 seconds. If the server does not
    // respond after 2000 seconds since the lease was granted, a client is
    // supposed to start REBIND procedure (emergency renewal that allows
    // switching to a different server).
    "renew-timer": 900,
    "rebind-timer": 1800,
    "preferred-lifetime": 3000,
    "valid-lifetime": 3600,

    // Many additional parameters can be specified here:
    // - option definitions (if you want to define vendor options, your own
    //                       custom options or perhaps handle standard options
    //                       that Kea does not support out of the box yet)
    // - client classes
    // - hooks
    // - ddns information (how the DHCPv4 component can reach a DDNS daemon)
    //
    // Some of them have examples below, but there are other parameters.
    // Consult Kea User's Guide to find out about them.

    // These are global options. They are going to be sent when a client
    // requests them, unless overwritten with values in more specific scopes.
    // The scope hierarchy is:
    // - global (most generic, can be overwritten by class, subnet or host)
    // - class (can be overwritten by subnet or host)
    // - subnet (can be overwritten by host)
    // - host (most specific, overwrites any other scopes)
    //
    // Not all of those options make sense. Please configure only those that
    // are actually useful in your network.
    //
    // For a complete list of options currently supported by Kea, see
    // Section 7.2.8 "Standard DHCPv4 Options". Kea also supports
    // vendor options (see Section 7.2.10) and allows users to define their
    // own custom options (see Section 7.2.9).
    "option-data": [
        // TODO: DNS over IPv6
        //{
        //    "name": "domain-name-servers",
        //    "data": "10.233.200.1, 10.233.200.2"
        //},
        {
            "name": "domain-search",
            "data": "lan.geco.ethz.ch"
        }
    ],

    "dhcp-ddns": {
        "enable-updates": true,
        "server-ip": "127.0.0.1",
        "server-port": 53001
    },

    "ddns-send-updates": true,
    // TODO: Change bouncer to properly kill leases via API
    "ddns-use-conflict-resolution": false,
    "ddns-override-client-update": true,
    "ddns-override-no-update": true,
    "ddns-replace-client-name": "when-not-present",
    "ddns-generated-prefix": "client",
    "ddns-qualifying-suffix": "lan.geco.ethz.ch",
    "hostname-char-set": "[^A-Za-z0-9.-]",
    "hostname-char-replacement": "x",

    // Another thing possible here are hooks. Kea supports a powerful mechanism
    // that allows loading external libraries that can extract information and
    // even influence how the server processes packets. Those libraries include
    // additional forensic logging capabilities, ability to reserve hosts in
    // more flexible ways, and even add extra commands. For a list of available
    // hook libraries, see https://gitlab.isc.org/isc-projects/kea/wikis/Hooks-available.
     "hooks-libraries": [
        {
            "library": "/usr/lib/x86_64-linux-gnu/kea/hooks/libdhcp_mysql_cb.so",
            "parameters": {}
        },
        {
            "library": "/usr/lib/x86_64-linux-gnu/kea/hooks/libdhcp_stat_cmds.so",
            "parameters": {}
        },
        {
            "library": "/usr/lib/x86_64-linux-gnu/kea/hooks/libdhcp_lease_cmds.so",
            "parameters": {}
        },
        {
            "library": "/usr/lib/x86_64-linux-gnu/kea/hooks/libdhcp_ha.so",
            "parameters": {
                "high-availability": [ {
                    "this-server-name": "$HOSTNAME",
                    "mode": "hot-standby",
                    "send-lease-updates": false,
                    "sync-leases": false,
                    "peers": [
                        {
                            "name": "kea-0.kea.kea.svc.cluster.local",
                            "url": "http://127.0.0.1:10000/",
                            "role": "primary"
                        },
                        {
                            "name": "kea-1.kea.kea.svc.cluster.local",
                            "url": "http://127.0.0.1:10001/",
                            "role": "standby"
                        }
                    ]
                } ]
            }
        }
    //   {
    //       // Forensic Logging library generates forensic type of audit trail
    //       // of all devices serviced by Kea, including their identifiers
    //       // (like MAC address), their location in the network, times
    //       // when they were active etc.
    //       "library": "/usr/lib/x86_64-linux-gnu/kea/hooks/libdhcp_legal_log.so",
    //       "parameters": {
    //           "path": "/var/lib/kea",
    //           "base-name": "kea-forensic4"
    //       }
    //   },
    //   {
    //       // Flexible identifier (flex-id). Kea software provides a way to
    //       // handle host reservations that include addresses, prefixes,
    //       // options, client classes and other features. The reservation can
    //       // be based on hardware address, DUID, circuit-id or client-id in
    //       // DHCPv4 and using hardware address or DUID in DHCPv6. However,
    //       // there are sometimes scenario where the reservation is more
    //       // complex, e.g. uses other options that mentioned above, uses part
    //       // of specific options or perhaps even a combination of several
    //       // options and fields to uniquely identify a client. Those scenarios
    //       // are addressed by the Flexible Identifiers hook application.
    //       "library": "/usr/lib/x86_64-linux-gnu/kea/hooks/libdhcp_flex_id.so",
    //       "parameters": {
    //           "identifier-expression": "relay4[2].hex"
    //       }
    //   }
     ],

    "subnet6": [
        {
            "subnet": "2001:67c:10ec:4c70::/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::10-2001:67c:10ec:4c70::ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::300/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::310-2001:67c:10ec:4c70::3ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::500/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::510-2001:67c:10ec:4c70::5ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::700/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::710-2001:67c:10ec:4c70::7ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::900/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::910-2001:67c:10ec:4c70::9ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::1100/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::1110-2001:67c:10ec:4c70::11ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::1300/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::1310-2001:67c:10ec:4c70::13ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::1500/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::1510-2001:67c:10ec:4c70::15ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::1700/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::1710-2001:67c:10ec:4c70::17ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::1900/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::1910-2001:67c:10ec:4c70::19ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::2100/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::2110-2001:67c:10ec:4c70::21ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::2300/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::2310-2001:67c:10ec:4c70::23ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::2500/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::2510-2001:67c:10ec:4c70::25ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::2700/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::2710-2001:67c:10ec:4c70::27ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::2900/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::2910-2001:67c:10ec:4c70::29ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::3100/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::3110-2001:67c:10ec:4c70::31ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::200/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::210-2001:67c:10ec:4c70:8000::2ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::400/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::410-2001:67c:10ec:4c70:8000::4ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::600/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::610-2001:67c:10ec:4c70:8000::6ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::800/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::810-2001:67c:10ec:4c70:8000::8ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::1000/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::1010-2001:67c:10ec:4c70:8000::10ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::1200/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::1210-2001:67c:10ec:4c70:8000::12ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::1400/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::1410-2001:67c:10ec:4c70:8000::14ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::1600/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::1610-2001:67c:10ec:4c70:8000::16ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::1800/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::1810-2001:67c:10ec:4c70:8000::18ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::2000/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::2010-2001:67c:10ec:4c70:8000::20ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::2200/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::2210-2001:67c:10ec:4c70:8000::22ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::2400/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::2410-2001:67c:10ec:4c70:8000::24ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::2600/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::2610-2001:67c:10ec:4c70:8000::26ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::2800/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::2810-2001:67c:10ec:4c70:8000::28ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::3000/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::3010-2001:67c:10ec:4c70:8000::30ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::3200/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::3210-2001:67c:10ec:4c70:8000::32ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::4000/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::4010-2001:67c:10ec:4c70::40ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::4100/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::4110-2001:67c:10ec:4c70:8000::41ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::4200/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::4210-2001:67c:10ec:4c70::42ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::4300/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::4310-2001:67c:10ec:4c70:8000::43ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::4400/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::4410-2001:67c:10ec:4c70::44ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::4500/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::4510-2001:67c:10ec:4c70:8000::45ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::4600/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::4610-2001:67c:10ec:4c70::46ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70:8000::4700/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70:8000::4710-2001:67c:10ec:4c70:8000::47ff" } ]
        },
        {
            "subnet": "2001:67c:10ec:4c70::4800/120",
            "pools": [ { "pool": "2001:67c:10ec:4c70::4810-2001:67c:10ec:4c70::48ff" } ]
        }
        // Logon (499) has no v6 on purpose!
    ],

    // There are many, many more parameters that DHCPv4 server is able to use.
    // They were not added here to not overwhelm people with too much
    // information at once.

    // Logging configuration starts here. Kea uses different loggers to log various
    // activities. For details (e.g. names of loggers), see Chapter 18.
    "loggers": [
    {
        // This section affects kea-dhcp4, which is the base logger for DHCPv4
        // component. It tells DHCPv4 server to write all log messages (on
        // severity INFO or more) to a file.
        "name": "kea-dhcp6",
        "output_options": [
            {
                // Specifies the output file. There are several special values
                // supported:
                // - stdout (prints on standard output)
                // - stderr (prints on standard error)
                // - syslog (logs to syslog)
                // - syslog:name (logs to syslog using specified name)
                // Any other value is considered a name of the file
                "output": "stdout",

                // Shorter log pattern suitable for use with systemd,
                // avoids redundant information
                "pattern": "%-5p %m\n"

                // This governs whether the log output is flushed to disk after
                // every write.
                // "flush": false,

                // This specifies the maximum size of the file before it is
                // rotated.
                // "maxsize": 1048576,

                // This specifies the maximum number of rotated files to keep.
                // "maxver": 8
            }
        ],
        // This specifies the severity of log messages to keep. Supported values
        // are: FATAL, ERROR, WARN, INFO, DEBUG
        "severity": "DEBUG",

        // If DEBUG level is specified, this value is used. 0 is least verbose,
        // 99 is most verbose. Be cautious, Kea can generate lots and lots
        // of logs if told to do so.
        "debuglevel": 60
    }
  ]
}
}
